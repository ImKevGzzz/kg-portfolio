---
import { getI18n } from "@src/i18n";
import { useTranslations, getLangFromUrl } from "../i18n/utils";
import PageTheme from "./PageTheme.astro";
import ToggleLanguage from "./ToggleLanguage.astro";
import Logo from "@src/Icons/Logo.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const {currentLocale} = Astro;
const i18n = getI18n({currentLocale});

const navbarItems = [
    {
        itemName: t('nav.aboutMe'),
        itemLabel: i18n.SECTIONS_LABEL.ABOUT_ME_LABEL,
        itemUrl: lang === 'es' ? `/#${i18n.SECTIONS_ID.ABOUT_ME_ID}` : `/${lang}/#${i18n.SECTIONS_ID.ABOUT_ME_ID}`,
        itemId: i18n.SECTIONS_ID.ABOUT_ME_ID
    },
    {
        itemName: t('nav.experience'),
        itemLabel: i18n.SECTIONS_LABEL.EXPERIENCE_LABEL,
        itemUrl: lang === 'es' ? `/#${i18n.SECTIONS_ID.EXPERIENCE_ID}` : `/${lang}/#${i18n.SECTIONS_ID.EXPERIENCE_ID}`,
        itemId: i18n.SECTIONS_ID.EXPERIENCE_ID
    },
    {
        itemName: t('nav.projects'),
        itemLabel: i18n.SECTIONS_LABEL.PROJECTS_LABEL,
        itemUrl: lang === 'es' ? `/#${i18n.SECTIONS_ID.PROJECTS_ID}` : `/${lang}/#${i18n.SECTIONS_ID.PROJECTS_ID}`,
        itemId: i18n.SECTIONS_ID.PROJECTS_ID
    },
    {
        itemName: t('nav.skillsAndTools'),
        itemLabel: i18n.SECTIONS_LABEL.SKILLS_AND_TOOLS_LABEL,
        itemUrl: lang === 'es' ? `/#${i18n.SECTIONS_ID.SKILLS_AND_TOOLS_ID}` : `/${lang}/#${i18n.SECTIONS_ID.SKILLS_AND_TOOLS_ID}`,
        itemId: i18n.SECTIONS_ID.SKILLS_AND_TOOLS_ID
    },
    {
        itemName: t('nav.contact'),
        itemLabel: i18n.SECTIONS_LABEL.CONTACT_LABEL,
        itemUrl: "mailto:kevingarciaoviedo05@gmail.com"
    }
];
---

<header class="flex max-[1280px]:hidden sticky top-0 z-10 px-6 justify-between dark:text-white text-darkModeColor w-full py-5 items-center dark:bg-lightModeExperienceHover dark:bg-opacity-[10%] bg-darkModeColor bg-opacity-[90%] backdrop-blur-xl border-b-[2px] dark:border-opacity-[35%] dark:border-lightModeExperienceHover border-lightTagIconColor">
    <section class="flex flex-row divide-x-2 dark:divide-white divide-lightTagIconColor items-center">
        <a role="link" class="cursor-pointer" href="https://kevin-garcia.vercel.app">
            <Logo class="w-[75px] h-auto dark:fill-white fill-lightTagIconColor mr-4 dark:hover:fill-lightTagIconColor hover:fill-white duration-300 transition-all"/>
        </a>
        <nav class="flex" id="navbar">
            {navbarItems.map(({itemName, itemLabel, itemUrl, itemId}) => (
                <a class="dark:text-white text-sm font-bold px-[10px] cursor-pointer dark:hover:text-lightTagIconColor text-lightTagIconColor hover:text-white transition-all duration-300 ml-2" href={itemUrl} data-id={itemId} aria-label={itemLabel}>{itemName}</a>
            ))}
        </nav>
    </section>
</header>
<section class="z-[11] fixed top-[20px] right-5">
    <PageTheme/>
</section>
<section class="right-[70px] top-[21px] z-[11] fixed">
    <ToggleLanguage/>
</section>
<header class="responsiveNavbar min-[1281px]:hidden">
    <hr class="w-full absolute h-full dark:bg-lightModeExperienceHover dark:bg-opacity-[10%] bg-darkModeColor bg-opacity-[90%] border-b-2 border-t-0 dark:border-opacity-[35%] dark:border-lightModeExperienceHover border-lightTagIconColor backdrop-blur-xl z-[2]"/>
    <label class="sidebarHamburger [&_input]:dark:bg-white [&_input]:bg-lightTagIconColor before:dark:bg-white before:bg-lightTagIconColor after:dark:bg-white after:bg-lightTagIconColor ease-in-out duration-200">
        <input type="checkbox">
    </label>
    <aside class="sidebar dark:bg-lightModeExperienceHover dark:bg-opacity-[10%] bg-darkModeColor bg-opacity-[90%] backdrop-blur-xl">
        <hr class="border-b-2 border-t-0 dark:border-opacity-[35%] dark:border-lightModeExperienceHover border-lightTagIconColor mt-16 max-w-[150px] mx-auto"/>
        <nav class="text-center flex flex-col gap-y-9 mt-8">
            {navbarItems.map(({itemName, itemLabel, itemUrl, itemId}) => (
                <a class="dark:text-white text-lightTagIconColor text-sm dark:hover:text-lightTagIconColor hover:text-white transition-all duration-300 font-bold mx-[10px]" href={itemUrl} aria-label={itemLabel} data-id={itemId}>
                    {itemName}
                </a>
            ))}
        </nav>
        <hr class="border-b-2 border-t-0 dark:border-opacity-[35%] dark:border-lightModeExperienceHover border-lightTagIconColor max-w-[150px] mx-auto mt-8"/>
        <section class="mt-8">
            <a role="link" class="cursor-pointer" href="https://kevin-garcia.vercel.app">
                <Logo class="w-[75px] h-auto dark:fill-white fill-lightTagIconColor dark:hover:fill-lightTagIconColor hover:fill-white duration-300 transition-all"/>
            </a>
        </section>
    </aside>
</header>

<style>
    :root {
        --animationTiming: 200ms ease-in-out;
        --barHeight: 2.5px;
        --barWidth: 25px;
        --foreground: #FF8C39;
        --hamburgerGap: 4.5px;
        --hamburgerHeight: calc(var(--barHeight) * 3 + var(--hamburgerGap) * 2);
        --hamburgerMargin: 5px;
        --xWidth: calc(var(--hamburgerHeight) * 1.41421356237);
    }

    .responsiveNavbar {
        height: 66px;
        margin: 0;
        position: fixed;
        width: 100%;
        z-index: 10;
    }

    .sidebarHamburger {
        cursor: pointer;
        display: flex;
        flex-direction: column;
        gap: var(--hamburgerGap);
        left: 1.5rem;
        position: absolute;
        top: 36%;
        transition: left var(--animationTiming);
        width: max-content;
        z-index: 12;
    }

    .sidebarHamburger:has(input:focus-visible)::before,
    .sidebarHamburger:has(input:focus-visible)::after,
    .sidebarHamburger input:focus-visible {
        border: 1px solid white;
        box-shadow: 0 0 0 1px var(--foreground);
    }

    .sidebarHamburger::before,
    .sidebarHamburger::after,
    .sidebarHamburger input {
        border-radius: 9999px;
        content: "";
        height: var(--barHeight);
        transform-origin: left center;
        transition: opacity var(--animationTiming), width var(--animationTiming), rotate var(--animationTiming), translate var(--animationTiming);
        width: var(--barWidth);
    }

    .sidebarHamburger:has(input:checked) {
        left: 6.9rem;
    }

    .sidebarHamburger input {
        appearance: none;
        margin: 0;
        outline: none;
        padding: 0;
        pointer-events: none;
    }

    .sidebarHamburger:has(input:checked)::before {
        rotate: 45deg;
        translate: 0 calc(var(--barHeight) / -2);
        width: var(--xWidth);
    }

    .sidebarHamburger:has(input:checked)::after  {
        rotate: -45deg;
        translate: 0 calc(var(--barHeight) / 2);
        width: var(--xWidth);
    }

    .sidebarHamburger input:checked {
        opacity: 0;
        width: 0;
    }

    .sidebar {
        min-height: 100vh;
        position: absolute;
        transition: translate var(--animationTiming);
        translate: -100%;
        width: 236px;
        z-index: 11;
    }

    .sidebarHamburger:has(input:checked) + .sidebar {
        translate: 0;
    }

    section {
        display: flex;
        justify-content: center;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const navbar = document.getElementById('navbar');
        navbar.addEventListener('click', (event) => {
            const target = event.target as Element;
            const link = target.closest('a');
            if (!link) return;

            const sectionId = link.getAttribute('data-id');
            if (sectionId) {
                event.preventDefault();
                const section = document.getElementById(sectionId);
                if (section) {
                    section.scrollIntoView({ behavior: 'smooth' });
                    history.pushState(null, '', link.getAttribute('href'));
                }
            }
        });
    });
</script>
