---
import { getI18n } from "@src/i18n";
import DarkModeIcon from "../Icons/DarkModeIcon.astro"
import LightModeIcon from "../Icons/LightModeIcon.astro"
import SystemThemeIcon from "../Icons/SystemThemeIcon.astro"

const {currentLocale} = Astro;
const i18n = getI18n({currentLocale});

const THEME_PAGE = [
    {
        icons: LightModeIcon,
        mode: i18n.PAGE_THEME.LIGHT_THEME
    },
    {
        icons: DarkModeIcon,
        mode: i18n.PAGE_THEME.DARK_THEME
    },
    {
        icons: SystemThemeIcon,
        mode: i18n.PAGE_THEME.SYSTEM_THEME
    }
]
---

<div class="relative ml-1 mr-1">
    <button id="themeToggleButton" class="appearance-none border-none flex hover:scale-[1.3] transition" aria-label={i18n.THEME_BUTTON_LABEL}>
        <LightModeIcon id="light" class="themeIcon size-5 transition-all dark:fill-white fill-lightTagIconColor"/>
        <DarkModeIcon id="dark" class="themeIcon absolute size-5 transition-all dark:fill-white fill-lightTagIconColor"/>
        <SystemThemeIcon id="system" class="themeIcon absolute size-5 transition-all dark:fill-white fill-lightTagIconColor dark:stroke-white stroke-lightTagIconColor"/>
    </button>
    <div id="themeMenu" class="absolute hidden scale-80 top-[51px] right-0 dark:bg-lightModeExperienceHover dark:bg-opacity-[10%] rounded backdrop-blur-xl bg-darkModeColor bg-opacity-[90%] shadow-[0px_0px_30px_0px_rgba(0,0,0,0.3)] p-[3px]">
        <ul>
            {
                THEME_PAGE.map(({icons: Icons, mode}) =>(
                    <li class="themesMenuOptions flex items-center gap-2 px-3 py-3 hover:bg-lightTagIconColor/15 dark:hover:bg-orange-400/30 rounded-sm cursor-pointer transition-all">
                        <Icons class="dark:fill-white dark:stroke-white fill-lightTagIconColor stroke-lightTagIconColor size-4 iconsStyle"/>
                        <p class="dark:text-white text-sm text-lightTagIconColor font-bold">{mode}</p>
                    </li>
                ))
            }
        </ul>
    </div>
</div>

<style>
    #themeMenu.open {
        animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
        display: inline;
    }

    #themeMenu.close {
        animation: scale-down-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
    }

    @keyframes scale-up-center {
        from {
            opacity: 0;
            transform: scale(0.8);
        }
        to {
            opacity: 1;
            transform: scale(1);
        }
    }

    @keyframes scale-down-center {
        from {
            opacity: 1;
            transform: scale(1);
        }

        to {
            opacity: 0;
            transform: scale(0.8);
        }
    }

    li > p, .iconsStyle {
        transition: all ease-in-out 250ms;
    }

    li:hover > p {
        color: white;
    }

    li:hover > .iconsStyle {
        fill: white;
        stroke: white;
    }
 </style>

<script is:inline>
    let remove = null;
    const matchMedia = window.matchMedia("(prefers-color-scheme: dark)");
    const menuThemes = document.getElementById("themeMenu");

    const THEME_MODE_MAP = {
        "Dark": "dark",
        "Oscuro": "dark",
        "Light": "light",
        "Claro": "light",
        "System": "system",
        "Sistema": "system"
    };

    const getThemePreference = () => {
        if (typeof localStorage !== "undefined") {
            return localStorage.getItem("theme") ?? "system";
        }
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
    }

    const updateIconTheme = (themePreference) => {
        const themeId = THEME_MODE_MAP[themePreference] || themePreference;
        document.querySelectorAll(".themeIcon").forEach((element) => {
            element.style.scale = element.id === themeId ? "1" : "0";
        })
    }

    const updateTheme = () => {
        if (remove != null) {
            remove();
        }
        matchMedia.addEventListener("change", updateTheme);
        remove = () => {
            matchMedia.removeEventListener("change", updateTheme);
        }

        const themePreference = getThemePreference();
        const isThemeDark = themePreference === "dark" || (themePreference === "system" && matchMedia.matches)
        updateIconTheme(themePreference);
        document.documentElement.classList[isThemeDark ? "add" : "remove"]("dark")
    }

    updateTheme();

    document.addEventListener("click", () => {
        if (menuThemes.classList.contains("open")) {
            menuThemes.classList.remove("open");
            void menuThemes.offsetWidth;
            menuThemes.classList.add("close");
            setTimeout(() => {
                menuThemes.classList.remove("close");
                menuThemes.style.display = "none";
            }, 150);
        }
    })

    document.getElementById("themeToggleButton").addEventListener("click", (e) => {
        e.stopPropagation();
        const isClosed = !menuThemes.classList.contains("open");
        if (isClosed) {
            menuThemes.style.display = "inline";
            void menuThemes.offsetWidth;
            menuThemes.classList.add("open");
        } else {
            menuThemes.classList.remove("open");
            void menuThemes.offsetWidth;
            menuThemes.classList.add("close");
            setTimeout(() => {
                menuThemes.classList.remove("close");
                menuThemes.style.display = "none";
            }, 150);
        }
    })

    document.querySelectorAll(".themesMenuOptions").forEach((element) => {
        element.addEventListener("click", (e) => {
            const themeText = e.target.innerText.toLowerCase().trim();
            const themePreference = THEME_MODE_MAP[themeText.charAt(0).toUpperCase() + themeText.slice(1)];
            localStorage.setItem("theme", themePreference);
            updateTheme();
        })
    })
</script>